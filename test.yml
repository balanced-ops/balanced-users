---

- hosts: all
  sudo: true
  vars_files:
    - vars/test_vars.yml

  tasks:
    - name: create a few ssh keys
      shell: |
        rm -f /tmp/{{ item }} &&
           ssh-keygen -t rsa -C {{ item }} -f /tmp/{{ item }} -N ''
      with_items: test_key_names

    - name: slurp remote ssh keygened files
      slurp: src=/tmp/{{ item }}.pub
      with_items:
        - "{{ test_key_names }}"
      register: keys

    - name: set the authorized keys
      set_fact:
        authorized_key_1: "{{ keys.results[0].content | b64decode | trim }}"
        authorized_key_2: "{{ keys.results[1].content | b64decode | trim }}"

- hosts: all
  sudo: true
  vars_files:
    - vars/test_vars.yml
  roles:
    - role: '../balanced-users'
      authorized_ssh_keys:
        - "{{ authorized_key_1 }}"
        - "{{ authorized_key_2 }}"
  tasks:
    - set_fact:
        authorized_key_file: "{{balanced_users_default_home_prefix}}/{{ user_mahmoud[0].name }}/.ssh/authorized_keys"
    - name: check that the keys are located in ~mahmoud/.ssh/authorized_keys
      shell: grep -q "{{ item }}" "{{ authorized_key_file }}"
      register: added_to_keys
      with_items:
        - "{{ authorized_key_1 }}"
        - "{{ authorized_key_2 }}"
    - name: assert | both ssh keys are associated with the user
      assert:
        that:
          - "{{ item.rc }} == 0"
      with_items:
        - "{{ added_to_keys.results }}"
    - name: query mahmoud groups
      sudo_user: "{{ user_mahmoud[0].name }}"
      shell: 'groups'
      register: mahmoud_groups
    - name: assert | mahmoud is part of "{{ balanced_users_admin_group }}"?
      assert:
        that:
          - "mahmoud_groups.stdout.find('{{ balanced_users_admin_group }}') != -1"


- hosts: all
  sudo: true
  vars_files:
    - vars/test_vars.yml
  roles:
    - role: '../balanced-users'
      authorized_ssh_keys: ["{{ authorized_key_1 }}"]
      revoked_ssh_keys: ["{{ authorized_key_2 }}"]
  tasks:
    - set_fact:
        authorized_key_file: "{{balanced_users_default_home_prefix}}/{{ user_mahmoud[0].name }}/.ssh/authorized_keys"
    - name: check that the keys are located in "{{ authorized_key_file }}"
      shell: grep -q "{{ authorized_key_1 }}" "{{ authorized_key_file }}"
      register: added_to_keys
    - assert:
        that:
          - "{{ added_to_keys.rc }} == 0"
    - name: check that the keys was removed from "{{ authorized_key_file }}"
      shell: '! grep -q "{{ authorized_key_2 }}" "{{ authorized_key_file }}"'
      register: removed_from_keys
    - name: assert | only one key is now associated with the user
      assert:
        that:
          - "{{ removed_from_keys.rc }} == 0"
    - name: does dudette user exist?
      shell: 'grep -q "{{ user_dudette[0].name }}" /etc/passwd'
      register: user_exists
    - name: assert | user exists on the system
      assert:
        that:
          - "{{ user_exists.rc }} == 0"
    - name: does dudette belong to her group?
      sudo_user: "{{ user_dudette[0].name }}"
      shell: 'groups'
      register: dudette_groups
    - name: assert | user associated to desired groups
      assert:
        that:
          - "dudette_groups.stdout.find('randomgroup') != -1"

- hosts: all
  sudo: true
  vars_files:
    - vars/test_vars.yml
  roles:
    - role: '../balanced-users'
      state: 'absent'
      authorized_ssh_keys: ["{{ authorized_key_1 }}"]
      revoked_ssh_keys: ["{{ authorized_key_2 }}"]
  tasks:
    - name: does the user exist?
      shell: '! grep -q "{{ user_mahmoud[0].name }}" /etc/passwd'
      register: user_dne
    - name: assert | user no longer exists on the system
      assert:
        that:
          - "{{ user_dne.rc }} == 0"
